apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  labels:
    app: class-management-auth-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: class-management-auth-service
  template:
    metadata:
      labels:
        app: class-management-auth-service
    spec:
      # initContainers:
      #   - name: wait-for-mysql
      #     image: busybox
      #     command: ['sh', '-c', 'until nc -z -v -w30 auth-service-mysql 3306; do echo "Waiting for MySQL"; sleep 5; done']
      imagePullSecrets:
        - name: harbor-secret
      containers:
        - name: class-management-auth-service-container
          image: harbor.th1enlm02.live/production/class-management-auth-service:062a7f5-1734189969 # {"$imagepolicy": "production:auth-service-policy"}
          imagePullPolicy: Always
          ports:
            - containerPort: 3077
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-mysql-deployment
  labels:
    app: auth-service-mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service-mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: auth-service-mysql
    spec:
      containers:
        - name: auth-service-mysql-container
          image: mysql:8.3.0
          # resources:
          #   requests:
          #     cpu: 5m
          #     memory: 50Mi
          #   limits:
          #     cpu: 100m
          #     memory: 1Gi
          ports:
            - containerPort: 3306
          # this is the liveness and readiness probes for the mysql container
          # it will check if the mysql server is up and running
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - mysqladmin
                - ping
            initialDelaySeconds: 5
            periodSeconds: 10
          volumeMounts:
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
              # lifecycle:
              #   postStart:
              #     exec:
              #       command: ["/bin/sh", "-c", "until mysqladmin ping -h localhost --silent; do sleep 1; done && mysql -h localhost -u root -p$MYSQL_ROOT_PASSWORD < /docker-entrypoint-initdb.d/init.sql"]
      volumes:
        - name: initdb
          configMap:
            name: auth-mysql-initdb
